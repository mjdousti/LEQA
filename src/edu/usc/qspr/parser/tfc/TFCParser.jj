/* *  * Copyright (C) 2014 Mohammad Javad Dousti and Massoud Pedram, SPORT lab, * University of Southern California. All rights reserved. *  * Please refer to the LICENSE file for terms of use. * */options{  IGNORE_CASE = true;  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(TFCParser)package edu.usc.qspr.parser.tfc;import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;import java.util.*;import org.jgrapht.DirectedGraph;import org.jgrapht.graph.DefaultEdge;import org.jgrapht.graph.SimpleDirectedGraph;import edu.usc.leqa.RuntimeConfig;import edu.usc.leqa.TFC2QASM;import edu.usc.qspr.qasm.*;public class TFCParser{	private static TFC2QASM tfcToQASM;	public static boolean parse(String inAddr, String outAddr){		tfcToQASM=new TFC2QASM ();		try		{			new TFCParser(new java.io.FileInputStream(inAddr)).start(outAddr);		}catch (ParseException e) {	      System.err.println(e.getLocalizedMessage());	      return false;	  	}catch (IOException e) {			System.err.println("TFC file not found!");			return false;		}		if (RuntimeConfig.VERBOSE)		{	  			System.out.println("TFC "+inAddr+" parsing completed successfully and "+outAddr+" is succesfully generated!");		}		return true;	}}PARSER_END(TFCParser)SKIP :{  " "| "\r"| "\t"| "\n"|  <"#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")?>}//Reserved Words TOKENTOKEN:{	< SIMPLEOP: ("t1") >	| < COMPLEXOP: ("t" (["0"-"9"])+|"f" (["0"-"9"])+) >	| < DEF:	(".o"|".v"|".i") >	| < CONST:	(".c") >	| < BEGIN: ("BEGIN") >	| < END: ("END") >}//IDENTIFIER TOKENTOKEN : { 	<ID: <LETTER>(<LETTER>|<DIGIT>)*>	|<#LETTER: (["a"-"z","A"-"Z"])>	|<#DIGIT : ["0"-"9"]>}TOKEN : /* Punctuation */{  < COMMA : "," >}TOKEN :{  < CONSTANT : (< DIGIT >)+ >}//MAIN UNIT	void start(String outAddr) throws IOException : {tfcToQASM.openFile(outAddr);}{  (DEF()|CONST())+  (BEGIN())      (SIMPLEOP() |COMPLEXOP())+  (END())  {    tfcToQASM.closeFile(outAddr);  }<EOF>}void BEGIN():{}{	< BEGIN >}void END():{}{	< END >}  void DEF() : {Token defType, qubitName; ArrayList<String> qubits=new ArrayList<String>();}{  defType=<DEF> qubitName=<ID>  {    qubits.add(qubitName.image);  }  (< COMMA > qubitName=<ID>  {    qubits.add(qubitName.image);  })*  {	tfcToQASM.defineQubit(defType.image, qubits);  }}void CONST() :{}{  <CONST> <CONSTANT >(< COMMA ><CONSTANT >)*	{	}}//One Operand inst.void SIMPLEOP() : {	Token cmd, q0, q1=null;}{  cmd=< SIMPLEOP >q0=<ID >  {	tfcToQASM.addSimpleCommand(cmd.image,q0.image);  }}void COMPLEXOP () : {	Token cmd, qubit; ArrayList<String> qubits=new ArrayList<String>();}{	cmd=<COMPLEXOP> qubit=<ID > {qubits.add(qubit.image);}	(< COMMA > qubit=<ID> {qubits.add(qubit.image);})+  {    tfcToQASM.addComplexCommand(cmd.image, qubits);  }}